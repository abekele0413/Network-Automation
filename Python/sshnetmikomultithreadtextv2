#python3 /mnt/c/Users/abekele/'OneDrive - VMware, Inc'/Documents/sshnetmikomultithread.py

#---------------------------------------------------------------------------------------------------------------------------------------------------
#python3 /mnt/c/Users/abekele/'OneDrive - VMware, Inc'/Documents/sshnetmikomultithread.py

import netmiko
import time
from getpass import getpass
import os
import openpyxl
from openpyxl import Workbook
import threading
import json
import re
#path = "/mnt/c/Users/abekele/Documents/devices.xlsx"
path = "/home/abekele/devicesmultithread.xlsx"
path2 = "/home/abekele/backups/SYD01"
wb = openpyxl.load_workbook(path)
ws = wb.active
rowsvalue =ws.max_row

username = "svc.isebackup"
passwdgetpass = getpass()
password = passwdgetpass+"@"



command3 = ''
command4 = ''
command5 = ''
command6 = ''
showrun = ''
ioscommandset = ''
nxcommandset = ''
command8 = ''
command9 = ''
output3 = ''
output4 = ''
output5 = ''
output6 = ''
output7 = ''
output8 = ''
output9 = ''
rowcount2 = 0
rowcount3 = 0
rowcount4 = 0
rowcount5 = 0
rowcount6 = 0
rowcount7 = 0
rowcount8 = 0
rowcount9 = 0
rowcount10 = 0
rowcount11 = 0
rowcount12 = 0
rowcount13 = 0
rowcount14 = 0
rowcount15 = 0
rowcount16 = 0
rowcount17 = 0
rowcount18 = 0
rowcount19 = 0
rowcount20 = 0
rowcount21 = 0
#-------------------show commands------------------------------------------------------------

command3 = "show run"
command4 = "show ip arp"
command5 = "show mac add"
command6 = "show cdp nei"
command7 = "show lldp nei"
command8 = "show int status"
command9 = "show int desc"
#ios
command10 = "show etherch sum"
#nexus
command11 = "show port-ch summ"

command12 = "show int trunk"
command13 = "show vlan brie"
command14 = "show ip int brie | i Vl"
command15 = "show ip int brie | i Lo"


#-------------------show commands------------------------------------------------------------


#-------------------conf t changes------------------------------------------------------------

#ioscommandset = [
#'tacacs server SOF02_ISE',
#'address ipv4 10.23.108.144'
#]

#nxcommandset = [
#
#]
#-------------------conf t changes------------------------------------------------------------

commandlista = [command3,command3,command3,command3, command4, command5, command6, ioscommandset, command8, command9,command10,command11,command12,command13,command14,command15]
commandlistb = [command3,command3,command3,command3, command4, command5, command6, nxcommandset, command8, command9,command10,command11,command12,command13,command14,command15]
outputlist =   [output3, output3, output3, output3,  output4,  output5,  output6,  output7,      output8,  output9]
rowcountlist= [rowcount2,rowcount2,rowcount2,rowcount3,rowcount4,rowcount5,rowcount6,rowcount7,rowcount8,rowcount9,rowcount10,rowcount11,rowcount12,rowcount13,rowcount14,rowcount15,rowcount16,rowcount17,rowcount18,rowcount19,rowcount20,rowcount21]

print('running....')
os.system('export NET_TEXTFSM=/home/abekele/.local/lib/python3.6/site-packages/ntc_templates/templates') 

def netmikoscript(rowcount):
	rowcountlist[rowcount]=rowcount
	for i in range(2,rowsvalue+1):
		if i ==rowcountlist[rowcount]:
			dtype = ws.cell(row = i, column = 2)
			dtype = dtype.value
			dtype = str(dtype)
			cell = ws.cell(row = i, column = 1)
			netdevice = cell.value
			if netdevice != None or '':
				f= open(os.path.join(path2, netdevice+'.txt'),"w+")
				try:
					#----Cisco IOS----------------------------------
					if dtype == 'cisco_ios':
						net_connect = netmiko.ConnectHandler(device_type="cisco_ios", host=netdevice, username=username, password=password,global_delay_factor=10)
						prompt= net_connect.find_prompt()
						prompt=str(prompt)
						aa = net_connect.send_command(command3)
						bb = net_connect.send_command(command4)
						cc = net_connect.send_command(command5)
						dd = net_connect.send_command(command6)
						ee = net_connect.send_command(command7)
						ff = net_connect.send_command(command8)
						gg = net_connect.send_command(command9)
						hh = net_connect.send_command(command10)
						ii = net_connect.send_command(command11)
						jj = net_connect.send_command(command12)
						kk = net_connect.send_command(command13)
						ll = net_connect.send_command(command14)
						mm = net_connect.send_command(command15)
						output7 = str(command3)+'\n'+str(aa)+'\n\n\n\n=============================================================================================================\n%s\n'%(command4) + str(bb)+'\n\n\n\n=============================================================================================================\n%s\n'%(command5) + str(cc)+'\n\n\n\n=============================================================================================================\n%s\n'%(command6) + str(dd)+'\n\n\n\n=============================================================================================================\n%s\n'%(command7) + str(ee)+'\n\n\n\n=============================================================================================================\n%s\n'%(command8) + str(ff)+'\n\n\n\n=============================================================================================================\n%s\n'%(command9) + str(gg)+'\n\n\n\n=============================================================================================================\n%s\n'%(command10) + str(hh)+'\n\n\n\n=============================================================================================================\n%s\n'%(command11) + str(ii)+'\n\n\n\n=============================================================================================================\n%s\n'%(command12) + str(jj)+'\n\n\n\n=============================================================================================================\n%s\n'%(command13) + str(kk)+'\n\n\n\n=============================================================================================================\n%s\n'%(command14) + str(ll)+'\n\n\n\n=============================================================================================================\n%s\n'%(command15) + str(mm)
						f.write(output7)


						##---show run ---------------    
						#
						#if showrun != '':
						#	showrunoutput = net_connect.send_command(showrun)
						#	showrunlength=len(showrunoutput)
						#	#print(showrunlength)
						#	showrunlengthloop = showrunlength // 25000
						#	#print(showrunlengthloop)
						#	valstart = 0
						#	valend = 25000
						#	colval2 = 10
						#	for l in range(showrunlengthloop+1):
						#		ws.cell(row = i, column = colval2, value = showrunoutput[valstart:valend])
						#		valstart += 25000
						#		valend += 25000
						#		colval2 +=1
						#
						#for vvv in range(3,10):
						#	if commandlista[vvv] != '':
						#		if commandlista[vvv] == ioscommandset:
						#			outputlist[vvv] = net_connect.send_config_set(commandlista[vvv])
						#			ws.cell(row = i, column = vvv, value = outputlist[vvv])
						#		else:
						#			outputlist[vvv]= net_connect.send_command(commandlista[vvv])
						#			ws.cell(row = i, column = vvv, value = outputlist[vvv])
						#
							#columns 10-15
			#-------------------------------------------------------------------------------
			#---------------------brocade ----------------------------------------------------------    
#					elif dtype == 'brocade':
#						net_connect = netmiko.ConnectHandler(device_type='cisco_ios', host=netdevice, username=username, password=password,global_delay_factor=10)
#						net_connect.enable()
#						prompt= net_connect.find_prompt()
#						#print(str(prompt))
#
#						output3 = net_connect.send_command('show run | i radius-server')
#						ws.cell(row = i, column = 3, value = output3)
#
			#-------------------------------------------------------------------------------
			#---------------------Aruba ----------------------------------------------------------    
#					elif dtype == 'aruba':
#						net_connect = netmiko.ConnectHandler(device_type='autodetect', host=netdevice, username=username, password=password,global_delay_factor=2)
#						net_connect.enable()
#						prompt= net_connect.find_prompt()
#						prompt= net_connect.find_prompt()
#						#print(str(prompt))
#
#						#WClist=['atl01-wc-lab03', 'aus03-wc-lc01', 'aus03-wc-lc02', 'bos04-wc-lc01', 'bos04-wc-lc02', 'bos07-wc-lc01', 'bos07-wc-lc02', 'bos09-wc-lc01', 'bos09-wc-lc02', 'dca01-wc-lc01', 'dca01-wc-lc02', 'den03-wc-lc01', 'den03-wc-lc02', 'dfw02-wc-lc01', 'dfw02-wc-lc02', 'eze01-wc-lc01', 'eze01-wc-lc02', 'iad01-wc-lc01', 'iad01-wc-lc02', 'pao12-wc-lc01', 'pao12-wc-lc02', 'pao12-wc-lc03', 'pao12-wc-lc04', 'pdx03-wc-lc01', 'pdx03-wc-lc02', 'sea02-wc-lc01', 'sea02-wc-lc02', 'sfo03-wc-lc01', 'sfo03-wc-lc02', 'wcli001-atl01', 'wcli001-aus2', 'wcli001-bos2', 'wcli001-bos3', 'wcli001-den1', 'wcli001-eat1', 'wcli001-ewr2', 'wcli001-gru1', 'wcli001-rap-atl01', 'wcli001-sjo1', 'wcli002-atl01', 'wcli002-aus2', 'wcli002-bos2', 'wcli002-bos3', 'wcli002-den1', 'wcli002-eat1', 'wcli002-ewr2', 'wcli002-gru1', 'wcli002-sjo1', 'yyz01-wc-lc01', 'yyz01-wc-lc02']
#						#APACWClist=['bkk01-wc-lc01', 'bkk01-wc-lc02', 'blr02-sw-lc01', 'blr02-wc-lc02', 'blr07-wc-lc01', 'blr07-wc-lc02', 'blr12-wc-lc01', 'blr12-wc-lc02', 'blr13-wc-lc01', 'blr13-wc-lc02', 'bom01-wc-lc01', 'bom01-wc-lc02', 'del02-wc-lc01', 'del02-wc-lc02', 'kix01-wc-lc01', 'kix01-wc-lc02', 'maa04-wc-lc01', 'maa04-wc-lc02', 'nrt02-wc-lc01', 'nrt02-wc-lc02', 'pnq04-wc-lc01', 'pnq04-wc-lc02', 'wcli001-blr11', 'wcli001-blr6', 'wcli001-blr9', 'wcli001-icn1', 'wcli001-kul1', 'wcli001-maa2', 'wcli001-mel3', 'wcli001-pnq1', 'wcli001-rap-blr9', 'wcli001-sin1', 'wcli001-syd1', 'wcli001-tpe1', 'wcli002-blr11', 'wcli002-blr6', 'wcli002-blr9', 'wcli002-icn1', 'wcli002-kul1', 'wcli002-maa2', 'wcli002-mel3', 'wcli002-pnq1', 'wcli002-sin1', 'wcli002-syd1', 'wcli002-tpe1']
#						output3 = net_connect.send_command('show running-config | include authentication-server,host')
#						output3 += net_connect.send_command(' ')
#						output3 += net_connect.send_command(' ')
#						ws.cell(row = i, column = 3, value = output3)
#
			#-------------------------------------------------------------------------------
			#---------------------opengear ---------------------------------------------------------- 
#
#					elif dtype == 'opengear':
#						try:
#							net_connect = netmiko.ConnectHandler(device_type='autodetect', host=netdevice, username=username, password=password,global_delay_factor=10)
#							net_connect.enable()
#							prompt= net_connect.find_prompt()
#							prompt=str(prompt)
#							if prompt == 'Connect to port >':
#								ogpasswrods=['Pr!or!ty1sS3cur!ty!@#$','S3cur!ty!sn01Pr!or!ty','Chrys@l1ssucksb1gtim3','Chrys@l1ssucksb1gtim3twU','st@rf1sh','s3@st@r','ChooseOpengear','default']
#								print('needs to be root')
#								for iog in ogpasswrods:
#									net_connect.disconnect()
#									try:
#										net_connect = netmiko.ConnectHandler(device_type='autodetect', host=netdevice, username='root', password=iog, global_delay_factor=10)
#										prompt= net_connect.find_prompt()
#										prompt=str(prompt)
#										print(prompt)
#										break
#									except:
#										print('wrong root password')	
#
#							else:
#								prompt= net_connect.find_prompt()
#								prompt=str(prompt)
#								print(prompt)
#						except:
#							print("login didn't work")
#						output3 = net_connect.send_command('config -g config.auth')
#						ws.cell(row = i, column = 3, value = output3)
#
#					#----------------------conf t changes---------------------------------------------------------
#					#-------------------------------------------------------------------------------   
#					#	net_connect.send_command("config -s config.auth.radius.auth_server='10.113.12.78,10.128.153.226,x.x.x.x'")
#					#	net_connect.send_command("config -s config.auth.radius.acct_server='10.113.12.78,10.128.153.226,x.x.x.x'")
#					#	config_result = net_connect.send_command("config -a") 
#					#	#print("Config result : ", config_result)
#					#	output4 = 'change successful'
#					#	ws.cell(row = i, column = 4, value = output4)
#					#	#print(output4)
#					#-------------------------------------------------------------------------------
#					#------------------------------------------------------------------------------- 
#						
#
#			#-------------------------------------------------------------------------------
#			#---------------------Avocent ----------------------------------------------------------  
#					elif dtype == 'avocent':
#						net_connect = netmiko.ConnectHandler(device_type='autodetect', host=netdevice, username=username, password=password,global_delay_factor=10)
#						net_connect.enable()
#						prompt= net_connect.find_prompt()
#						prompt= net_connect.find_prompt()
#						prompt=str(prompt)
#						if 'cli->' not in prompt:
#							net_connect.send_command('cli', expect_string="cli")
#						
#							
#		#				avocent_prompt_regex = re.findall(r'[\w]', prompt)
#		
#						#print(prompt)
#						output1 = net_connect.send_command('show system/information/', expect_string="cli")
#						modelnum=re.findall(r'type:\s[\w,]{3}[\d]{4}',output1)
#						modelnum = str(modelnum)
#						modelnum = modelnum[modelnum.find('type:')+6:modelnum.find(']')-1]
#						#print(modelnum)
#						#for 6000 series
#						if modelnum[:4] == ('ACS6'):
#							output3 = 'avocent is a 6000 series'
#							ws.cell(row = i, column = 3, value = output3)
#							output4 = net_connect.send_command('cd authentication/', expect_string="cli")
#							output4 = net_connect.send_command('list_configuration', expect_string="cli")
#							ws.cell(row = i, column = 4, value = output4)
#
#
#				#-----------conf t changes---------------------------------------------------------
				#----------------------------------------------------------------------------------
				#			try:
				#
				#
				#				net_connect.send_command("cd /users/local_accounts/user_names/admin/", expect_string="cli") 
				#				admin_path_result = net_connect.send_command("pwd", expect_string="cli") 
				#				print("path(admin) : ", admin_path_result)
				#				net_connect.send_command("set password=" + new_password + " confirm_password=" + new_password, expect_string="cli")
				#				net_connect.send_command("cd /users/local_accounts/user_names/root/", expect_string="cli")
				#				
				#				root_path_result = net_connect.send_command("pwd", expect_string="cli") 
				#				print("path(root) : ", root_path_result)
				#				
				#				net_connect.send_command("set password=" + new_password + " confirm_password=" + new_password, expect_string="cli")
				#				net_connect.send_command("commit", expect_string="cli")
				#				output4 = 'change successful'
				#				print(output4)
				#			except:
				#				print('avocent 6000 password change failed')
				#---------------------------------------------------------------------------------------
				#---------------------------------------------------------------------------------------
#						#for 8000 series
#						elif modelnum[:4] == ('ACS8'):
#							output3 = 'avocent is a 8000 series'
#							ws.cell(row = i, column = 3, value = output3)
#							output4 = net_connect.send_command('cd authentication/', expect_string="cli")
#							output4 = net_connect.send_command('list_configuration', expect_string="cli")
#							ws.cell(row = i, column = 4, value = output4)
			#---------------conf t changes---------------------------------------------------------
			#--------------------------------------------------------------------------------------
			#				try:
			#					net_connect.send_command("cd /users/local_accounts/user_names/admin/settings/", expect_string="cli") 
			#					admin_path_result = net_connect.send_command("pwd", expect_string="cli") 
			#					print("path(admin) : ", admin_path_result)
			#
			#					net_connect.send_command("set password=" + new_password + " confirm_password=" + new_password, expect_string="cli")
			#					
			#					net_connect.send_command("cd /users/local_accounts/user_names/root/settings/", expect_string="cli") 
			#					root_path_result = net_connect.send_command("pwd", expect_string="cli") 
			#					print("path(root) : ", root_path_result)
			#
			#					net_connect.send_command("set password=" + new_password + " confirm_password=" + new_password, expect_string="cli")
			#					net_connect.send_command("commit", expect_string="cli") 
			#					output4 = 'change successful'
			#					print(output4)
			#				except:
			#					print('avocent 6000 password change failed')
			#-------------------------------------------------------------------------------------------
#			#-------------------------------------------------------------------------------------------
#						else:
#							print('model not a 6000 or 8000 series')
#
#				
#
#					else:
#						net_connect = netmiko.ConnectHandler(device_type="cisco_ios", host=netdevice, username=username, password=password)
#						prompt= net_connect.find_prompt()
#						prompt=str(prompt)
#					#---show run ---------------    
#						if showrun != '':
#							showrunoutput = net_connect.send_command(showrun)
#							showrunlength=len(showrunoutput)
#							#print(showrunlength)
#							showrunlengthloop = showrunlength // 25000
#							#print(showrunlengthloop)
#							valstart = 0
#							valend = 25000
#							colval2 = 10
#							for l in range(showrunlengthloop+1):
#								ws.cell(row = i, column = colval2, value = showrunoutput[valstart:valend])
#								valstart += 25000
#								valend += 25000
#								colval2 +=1
#							#columns 10-15
#
#						#output3 = net_connect.send_command('show interface br')
#						#ws.cell(row = i, column = 3, value = output3)
#						for vvv in range(3,10):
#							if commandlistb[vvv] != '':
#								if commandlistb[vvv] == nxcommandset:
#									outputlist[vvv] = net_connect.send_config_set(commandlistb[vvv])
#									ws.cell(row = i, column = vvv, value = outputlist[vvv])
#								else:
#									outputlist[vvv]= net_connect.send_command(commandlistb[vvv])
#									ws.cell(row = i, column = vvv, value = outputlist[vvv])
#				
#
			#-------------------------------------------------------------------------------
					net_connect.disconnect()
					f.close()
					wb.save(path)
					print('########################################################\nCurrently on row %s of %s. Sucessfully logged into %s\n---------------------------------------'% (i,rowsvalue,cell.value))
		#			print('======================================================== \n %s before: \n %s \n------------------------------------\n %s after: \n %s\n ========================================================'%(netdevice,output2,netdevice, output6))
				
		#			x=input('%s was sucessful. press enter to continue '%(netdevice))
				except:
					print('########################################################\nCurrently on row %s of %s. Error logging into %s\n---------------------------------------'% (i,rowsvalue,cell.value))
					ws.cell(row = i, column = 3, value = 'there was an error here')
					wb.save(path)
					#print('error connecting')
		#			x=input('%s had issues logging in. press enter to continue'%(netdevice))
			rowcountlist[rowcount]+=10





def MTstartrow2():
	netmikoscript(2)
def MTstartrow3():
	netmikoscript(3)
def MTstartrow4():
	netmikoscript(4)
def MTstartrow5():
	netmikoscript(5)
def MTstartrow6():
	netmikoscript(6)
def MTstartrow7():
	netmikoscript(7)
def MTstartrow8():
	netmikoscript(8)
def MTstartrow9():
	netmikoscript(9)
def MTstartrow10():
	netmikoscript(10)
def MTstartrow11():
	netmikoscript(11)
def MTstartrow12():
	netmikoscript(12)
def MTstartrow13():
	netmikoscript(13)
def MTstartrow14():
	netmikoscript(14)
def MTstartrow15():
	netmikoscript(15)
def MTstartrow16():
	netmikoscript(16)
def MTstartrow17():
	netmikoscript(17)
def MTstartrow18():
	netmikoscript(18)
def MTstartrow19():
	netmikoscript(19)
def MTstartrow20():
	netmikoscript(20)
def MTstartrow21():
	netmikoscript(21)



threading.Thread(target=MTstartrow2).start()
threading.Thread(target=MTstartrow3).start()
threading.Thread(target=MTstartrow4).start()
threading.Thread(target=MTstartrow5).start()
threading.Thread(target=MTstartrow6).start()
threading.Thread(target=MTstartrow7).start()
threading.Thread(target=MTstartrow8).start()
threading.Thread(target=MTstartrow9).start()
threading.Thread(target=MTstartrow10).start()
threading.Thread(target=MTstartrow11).start()
threading.Thread(target=MTstartrow12).start()
threading.Thread(target=MTstartrow13).start()
threading.Thread(target=MTstartrow14).start()
threading.Thread(target=MTstartrow15).start()
threading.Thread(target=MTstartrow16).start()
threading.Thread(target=MTstartrow17).start()
threading.Thread(target=MTstartrow18).start()
threading.Thread(target=MTstartrow19).start()
threading.Thread(target=MTstartrow20).start()
threading.Thread(target=MTstartrow21).start()

